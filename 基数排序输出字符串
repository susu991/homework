#include <stdio.h>



 int getRadixValue( int value,  int radix,  int radixCount) {
    int radixValue = value;//记住输进来的数 
    for (size_t i = 0; i < radixCount; ++i)
    {
        radixValue=radixValue/radix;//通过radixCount得知要比较的位数 
    }
    radixValue = radixValue % radix;//求的该位数的数字 
    return radixValue;   //返回 
}
bool radixSort( int array[],  int arrLen,  int radix) {
    if (arrLen <= 1) {
        return true;//当数组元素小于1时，原样输出 
    }

    //Find maximum and minimal value
    int max = array[0]; 

    for ( int i = 1; i < arrLen; ++i)
    {
         if (max < array[i]) {
            max = array[i];//找到最大值 
        }
    }

    int radixCount = 0;//定义位数 
    while ((max/=radix) > 0) {
        ++radixCount;//通过最大值得到位数 
    }

    // Create counting buckets
    int *countingRadixBuckets = new int[radix]();//创建桶 
    int *tempArray = new int[arrLen]();//创建一个与原数组一样大小的数组空间  

    for (size_t radixIndex = 0; radixIndex <= radixCount; ++radixIndex)//遍历数组元素的各个位数 
    {
        // Count number of values in array
        for (size_t j = 0; j < arrLen; ++j)
        {
            ++countingRadixBuckets[getRadixValue(array[j], radix, radixIndex)];//将相应的数据放入桶中 
        }

        // Accumulate coutingBuckets to find the last ordered location of value in array
        for (size_t k = 1; k < radix; ++k)
        {
            countingRadixBuckets[k] += countingRadixBuckets[k-1];//将桶中的不同元素的不同位数进行比较排序 
        }

        //Traverse the array in reversed order
        for (int l = arrLen - 1; l >= 0; --l)//将对比遍历过后的原数组元素放入新建数组中 
        {
            tempArray[--countingRadixBuckets[getRadixValue(array[l], radix, radixIndex)]] = array[l];
        }

        for (size_t m = 0; m < arrLen; ++m)//再将排序好的放在新建数组空间的元素放回原数组中 
        {
            array[m] = tempArray[m];
        }

        for (size_t n = 0; n < radix; ++n)
        {
            countingRadixBuckets[n] = 0;
        }
        
    }
    
    delete [] countingRadixBuckets;
    delete [] tempArray;
    
    return true;
}
//输出数组 
void printArray( int array[], int arrLen) {
    for (int i = 0; i < arrLen; ++i) {
       printf("%c ",array[i]);
    }
    printf("\n");
}

int main(){
     int array0[] = {'c','f','a','d'};
     int arrayLen = sizeof(array0)/sizeof(int);//得到数组中元素的个数

    printArray(array0, arrayLen);
    radixSort(array0, arrayLen, 10);
    printArray(array0, arrayLen);

//    cout << "=========================================" << endl;
//
//    unsigned int array1[] = {1};
//    arrayLen = sizeof(array1)/sizeof(int);
//
//    printArray(array1, arrayLen);
//    radixSort(array1, arrayLen, 10);
//    printArray(array1, arrayLen);
//
//    cout << "=========================================" << endl;
//
//    unsigned int array2[] = {20, 1};
//    arrayLen = sizeof(array2)/sizeof(int);
//
//    printArray(array2, arrayLen);
//    radixSort(array2, arrayLen, 10);
//    printArray(array2, arrayLen);
//
//    cout << "=========================================" << endl;
//
//    unsigned int array3[] = {1, 300, 30};
//    arrayLen = sizeof(array3)/sizeof(int);
//
//    printArray(array3, arrayLen);
//    radixSort(array3, arrayLen, 10);
//    printArray(array3, arrayLen);
//
//
//    cout << "=========================================" << endl;
//
//    unsigned int array4[] = {92, 29, 12, 121};
//    arrayLen = sizeof(array4)/sizeof(int);
//
//    printArray(array4, arrayLen);
//    radixSort(array4, arrayLen, 10);
//    printArray(array4, arrayLen);
//
//    cout << "=========================================" << endl;
//
//    unsigned int array5[] = {19, 33, 34, 999, 5};
//    arrayLen = sizeof(array5)/sizeof(int);
//
//    printArray(array5, arrayLen);
//    radixSort(array5, arrayLen, 10);
//    printArray(array5, arrayLen);
//
//
//     cout << "=========================================" << endl;
//
//    unsigned int array6[] = {90, 311, 34, 59, 57, 85, 107, 1277, 125, 143, 169, 162};
//    arrayLen = sizeof(array6)/sizeof(int);
//
//    printArray(array6, arrayLen);
//    radixSort(array6, arrayLen, 10);
//    printArray(array6, arrayLen);
return 0;

}
